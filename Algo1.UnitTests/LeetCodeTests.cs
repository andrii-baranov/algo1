using Algo1.Core;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algo1.UnitTests
{
    [TestClass]
    public class LeetCodeTests
    {

        [TestMethod]
        public void SortedMergeTest()
        {
            int[] a = new int[8] { 1, 2, 3, 3, 4, 0, 0, 0 };
            int[] b = new int[3] { 1, 3, 5 };

            var result = Solution.SortedMerge(a, b);
        }

        [TestMethod]
        public void SearchRotatedTest()
        {
            int[] a = new int[10] { 5, 6, 7, 8, 9, 0, 1, 2, 3, 4 };

            var result = new Solution().SearchRotated(a, 5);
        }

        [TestMethod]
        public void IsValidSudokuTest()
        {
            System.Convert.ToChar(5);
            char[,] board = new char[9,9]
                {
                    { '.', '8', '7', '6','5','4','3','2','1'},
                    { '2', '.', '4', '.','.','.','.','.','.'},
                    { '3', '.', '5', '.','.','.','.','.','.'},
                    { '4', '.', '.', '.','.','.','.','.','.'},
                    { '5', '.', '.', '.','.','.','.','.','.'},
                    { '6', '.', '.', '.','.','.','.','.','.'},
                    { '7', '.', '5', '.','.','.','.','.','3'},
                    { '8', '.', '.', '.','.','.','.','1','.'},
                    { '9', '.', '.', '.','.','.','2','.','.'},
                };
                //[".87654321", "2........", "3........", "4........", "5........", "6........", "7........", "8........", "9........"];

            var result = new Solution().IsValidSudoku(board);
        }

        [TestMethod]
        public void SolveSudoku()
        {
            //
           /*
            * ["..9748...",
            * "7........",
            * ".2.1.9...",
            * "..7...24.",
            * ".64.1.59.",
            * ".98...3..",
            * "...8.3.2."
//           ,"........6",
              "...2759.."]
*/
        System.Convert.ToChar(5);
            char[,] board = new char[9, 9]
                {
                    { '.', '.', '9', '7','4','8','.','.','.'},
                    { '7', '.', '.', '.','.','.','.','.','.'},
                    { '.', '2', '.', '1','.','9','.','.','.'},
                    { '.', '.', '7', '.','.','.','2','4','.'},
                    { '.', '6', '4', '.','1','.','5','9','.'},
                    { '.', '9', '8', '.','.','.','3','.','.'},
                    { '.', '.', '.', '8','.','3','.','2','.'},
                    { '.', '.', '.', '.','.','.','.','.','6'},
                    { '.', '.', '.', '2','7','5','9','.','.'},
                };
            //[".87654321", "2........", "3........", "4........", "5........", "6........", "7........", "8........", "9........"];

            new Solution().SolveSudoku(board);
        }

        [TestMethod]
        public void GroupAnagramsTests()
        {
            string[] anagrams = new string[] { "cat", "dog", "act", "dod", "tac", "etc", "god" };
            var result = Solution.GroupAnagrams(anagrams);
        }

        [TestMethod]
        public void CombinationSumTests()
        {
            int[] inp = new int[6] { 2, 3, 7, 5, 6, 1 };
            var result = new Solution().CombinationSum(inp, 10);
        }


        [TestMethod]
        public void FindFirstMissingIntTests()
        {
            //      int[] inp = new int[7] { -2, 1, 0, 3, 8, 4, -4 };
            int[] inp = new int[7] {2, 1, 0, 3, 8, 4, -4 };
            var result = new Solution().FirstMissingPositive(inp);
        }



        [TestMethod]
        public void MaxSubArrayTest()
        {
            int[] inp = new int[] { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
            var result = new Solution().MaxSubArray(inp);
        }

        [TestMethod]
        public void PowTests()
        {
            double a = 2.00000;
            int n = -2147483648;
            var result = new Solution().MyPow(a,n);
        }


        [TestMethod]
        public void LongestPalindrome()
        {
            //string palindrome = "palsdfafasfsafasfasdfasfaaaffgffaabababaabbabababababbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa";
            string palindrome = "afsfasfdsfasfadsfasfasfd";
            var result = new Solution().LongestPalindrome(palindrome);
        }


        [TestMethod]
        public void LongestValidParenthesesTests()
        {
            var s
            var result = new Solution().LongestValidParentheses(s);
        }

        [TestMethod]
        public void IsMatchTest()
        {
            var s = "abbbbcde";
            var p = "***a*c?e";
            var result = new Solution().IsMatch(s,p);
        }



        [TestMethod]
        public void FindSubstringTests()
        {
            string[] words = new string[] { "bar", "foo", "the" };
            var result =  new Solution().FindSubstring("barfoofoobarthefoobarman", words);
        }

        [TestMethod]
        public void FindSubstringTests2()
        {
            string[] words = new string[] { "cat", "dog" };
            var result = new Solution().FindSubstring3("dogcatabafsafdogacatdogcat", words);
        }

        [TestMethod]
        public void CheckZigZag()
        {
            string input = "PAYPALISHIRING";
            string expected = "PAHNAPLSIIGYIR";
            var actual = Solution.Convert(input, 3);
            Assert.IsTrue(actual == expected);
        }

        [TestMethod]
        public void ReserveIntTests()
        {
            int in2 = Int32.MaxValue;
            int input = -1345;
            var actual = Solution.Reverse(input);

            Assert.IsTrue(actual == -5431);
        }


        [TestMethod]
        public void AtoiTest()
        {
            var input = "312312";
            var actual = Solution.MyAtoi(input);

            Assert.IsTrue(actual == 312312);
        }

        [TestMethod]
        public void CountStepsTest()
        {
            var res = Solution.CountSteps(4, 3);
            Assert.IsTrue(res == 7);
            Assert.IsTrue(Solution.CountSteps(5, 3) == 13);
        }

        [TestMethod]
        public void RoboPathTest()
        {
            int[][] map = new int[5][];
            map[0] = new int[] { 0, 0, 1, 0, 0 };
            map[1] = new int[] { 1, 0, 1, 0, 0 };
            map[2] = new int[] { 1, 0, 0, 0, 1 };
            map[3] = new int[] { 0, 0, 0, 0, 0 };
            map[4] = new int[] { 0, 0, 0, 1, 0 };

            var r = Solution.RoboPath(4, 4, map);

            Assert.IsTrue(r != null);
        }


        [TestMethod]
        public void ComposePowerSetTest()
        {
            var baseSet = new List<string>() { "A", "B", "C", "D" };

            var result = Solution.PowerSet(baseSet);
        }

        [TestMethod]
        public void PrintParensTest()
        {
            string actualResult;
            actualResult = Solution.PrintParens(1);
            actualResult = Solution.PrintParens(2);
            actualResult = Solution.PrintParens(3);
            actualResult = Solution.PrintParens(4);
        }


        [TestMethod]
        public void GeneratePermWithoutDupsTests()
        {
            string result = Solution.GeneratePermsWithoutDups("abcd");

        }

        [TestMethod]
        public void PaintFillTests()
        {
            int[][] map = new int[5][];
            map[0] = new int[] { 0, 0, 1, 0, 0 };
            map[1] = new int[] { 0, 0, 1, 0, 0 };
            map[2] = new int[] { 0, 0, 1, 0, 1 };
            map[3] = new int[] { 0, 0, 1, 1, 0 };
            map[4] = new int[] { 0, 0, 0, 1, 0 };

           Solution.PaintFill(map, 2, 1, 3);
        }

        [TestMethod]
        public void RomanNumbersTests()
        {
            int numb = 1999;

            var res = Solution.IntToRoman(numb);

            Assert.IsTrue(res == "MCMXCIX");
        }

        [TestMethod]
        public void RomanToIntNumbersTests()
        {
            int numb = 1999;

            var res = Solution.RomanToInt("MCMXCIX");

            Assert.IsTrue(res == 1999);
        }


        [TestMethod]
        public void LongestCommonPrefixTest()
        {
            var res = Solution.LongestCommonPrefix(new string[] { "abc", "ab", "abcd", "abd" });

            Assert.IsTrue(res == "ab");
        }


        [TestMethod]
        public void ThreeSum()
        {
            var res = Solution.ThreeSum(new int[] { 1, -1, 0, 2, -2, 3, -1, -3, 0 });
        }
    }
}
